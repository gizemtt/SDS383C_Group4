dx = pVecDens$x[i + 1] - pVecDens$x[i]
area = area + (dx*(pVecDens$y[i + 1] + pVecDens$y[i])/2)
i = i + 1
}
xHigh = pVecDens$x[i]
result = list("low" = xLow, "high" = xHigh)
return(result)
}
mixCredInt <- function(x, piTrace, muTrace, sigmaTrace){
y = c()
for (j in 2000:4000){
est = 0
for (i in 1:k){
add = piTrace[j, i] * dnorm(x, muTrace[j, i], sd = sigmaTrace[j, i]^0.5)
est = est + add
}
y = append(y, est)
}
credInt = getCredIn(y, 0.1)
return(credInt)
}
generateCredInt <-function(mixture){
yEstLow = c()
yEstHigh = c()
for (x in mixture$x){
yAddLow = mixCredInt(x, mixture$pi, mixture$mu, mixture$sigma)$low
yAddHigh = mixCredInt(x, mixture$pi, mixture$mu, mixture$sigma)$high
yEstLow = append(yEstLow, yAddLow)
yEstHigh = append(yEstHigh, yAddHigh)
}
res = list("low"=yEstLow, "high"=yEstHigh)
return(res)
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
k = 8
modelk3 = gibbsLocScale(k = k, mu0 = k, sigma0 = 0.5*k, a0 = 270, b0= 300)
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
library(dirmult)
library(invgamma)
library(MASS)
gibbsLocScale <- function(k, mu0 = 2, sigma0 = 3, a0 = 2, b0 = 2, warning = FALSE){
if (warning == FALSE){
warningToggle = getOption("warn")
options(warn = -1)
}
data = galaxies / 1000
initPi = rdirichlet(n=1, alpha = rep(2/k, k))
initMu = seq(min(data), max(data), length.out = k)
initSigma = rep(100, k)
muTrace = matrix(data = initMu, nrow = 1)
sigmaTrace = matrix(data = initSigma, nrow = 1)
piTrace = matrix(data = initPi, nrow = 1)
for (r in 1:3000){
# the pi_ik and sampling the latent variables
z = c()
for (i in 1:length(data)){
workPi = rep(0, k)
for (clus in 1:k){
num = initPi[clus] * dnorm(data[i], mean = initMu[clus], sd = initSigma[clus]^0.5)
denom = 0
for (x in 1:k){
denom = denom + (initPi[x] * dnorm(data[i], mean = initMu[x], sd = initSigma[x]^0.5))
}
workPi[clus] = num / denom
}
workPi[is.na(workPi)] = 0.001
z = append(z, which(rmultinom(1, 1, prob = workPi) == 1))
}
z
# n_k
nkVec = rep(0,k)
for (i in 1:k){
nkVec[i] = length(z[z == i])
}
# ybar_k
ybarkVec = rep(0,k)
for (i in 1:k){
ybarkVec[i] = sum(data[z == i]) / nkVec[i]
}
# sigmak_n
sigmaknVec = rep(0,k)
for (i in 1:k){
sigmaknVec[i] = 1/((1/sigma0) + (nkVec[i]/initSigma[i]))
}
# muk_n
muknVec = rep(0,k)
for (i in 1:k){
muknVec[i] = sigmaknVec[i]*( (mu0/sigma0) + (nkVec[i]*ybarkVec[i]/initSigma[i]))
}
z
# sampling the mus
newMu = rep(0,k)
for (i in 1:k){
newMu[i] = rnorm(n = 1, mean = muknVec[i], sd = sigmaknVec[i]^0.5)
if (is.na(newMu[i])){
newMu[i] = mean(muTrace[1:r,i])
}
}
# ak_n
aknVec = rep(0,k)
for (i in 1:k){
aknVec[i] = a0 + (nkVec[i]/2)
}
# sample variance and mean
skVec = rep(0,1)
muVec = rep(0,1)
for (i in 1:k){
skVec[i] = var(data[z == i])
muVec[i] = mean(data[z == i])
}
z
# bk_n
bknVec = rep(0,k)
for (i in 1:k){
bknVec[i] = b0 + ((nkVec[i] - 1)*skVec[i]/2) + ((nkVec[i]*(muVec[i] - newMu[i])^2)/2)
}
# sample the new sigmas
newSigma = rep(0,1)
for (i in 1:k){
newSigma[i] = rinvgamma(n = 1, aknVec[i], bknVec[i])
if (is.na(newSigma[i])){
newSigma[i] = initSigma[i] #mean(sigmaTrace[1:r,i])
}
}
initMu = newMu
initSigma = newSigma
initPi = rdirichlet(n=1, alpha = rep(2/k, k) + nkVec)
muTrace = rbind(muTrace, newMu)
sigmaTrace = rbind(sigmaTrace, newSigma)
piTrace = rbind(piTrace, initPi)
}
xSpace = seq(min(data), max(data), by = 0.1)
mixModel = 0
for (i in 1:k){
add = mean(piTrace[1000:3000,i]) * dnorm(xSpace, mean(muTrace[1000:3000,i]), mean(sigmaTrace[1000:3000,i]^0.5))
mixModel = mixModel + add
}
if (warning == FALSE){
options(warn = warningToggle)
}
res = list("x" = xSpace, "model" = mixModel,
"mu" = muTrace, "sigma" = sigmaTrace, "pi" = piTrace)
return(res)
}
getCredIn <- function(vec, alpha){
pVecDens = density(vec)
area = 0
i = 1
while (area <= alpha/2){
dx = pVecDens$x[i + 1] - pVecDens$x[i]
area = area + (dx*(pVecDens$y[i + 1] + pVecDens$y[i])/2)
i = i + 1
}
xLow = pVecDens$x[i]
area = 0
i = 1
while (area <= 1 - (alpha/2)){
dx = pVecDens$x[i + 1] - pVecDens$x[i]
area = area + (dx*(pVecDens$y[i + 1] + pVecDens$y[i])/2)
i = i + 1
}
xHigh = pVecDens$x[i]
result = list("low" = xLow, "high" = xHigh)
return(result)
}
mixCredInt <- function(x, piTrace, muTrace, sigmaTrace){
y = c()
for (j in 1000:3000){
est = 0
for (i in 1:k){
add = piTrace[j, i] * dnorm(x, muTrace[j, i], sd = sigmaTrace[j, i]^0.5)
est = est + add
}
y = append(y, est)
}
credInt = getCredIn(y, 0.1)
return(credInt)
}
generateCredInt <-function(mixture){
yEstLow = c()
yEstHigh = c()
for (x in mixture$x){
yAddLow = mixCredInt(x, mixture$pi, mixture$mu, mixture$sigma)$low
yAddHigh = mixCredInt(x, mixture$pi, mixture$mu, mixture$sigma)$high
yEstLow = append(yEstLow, yAddLow)
yEstHigh = append(yEstHigh, yAddHigh)
}
res = list("low"=yEstLow, "high"=yEstHigh)
return(res)
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
k = 8
modelk3 = gibbsLocScale(k = k, mu0 = k, sigma0 = 0.5*k, a0 = 270, b0= 300)
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(2,3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = k, sigma0 = 0.5*k, a0 = 270, b0= 300)
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
paste("K = ", k)
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.75*k, a0 = 270, b0= 300)
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.95*k, a0 = 270, b0= 300)
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.95*k, a0 = 10, b0= 300) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.95*k, a0 = 470, b0= 300) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.95*k, a0 = 750, b0= 300) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.95*k, a0 = 550, b0= 300) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.95*k, a0 = 471, b0= 127) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.95*k, a0 = 470, b0= 280) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.95*k, a0 = 470, b0= 340) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.75*k, a0 = 470, b0= 300) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
# k = 3 default hyperparam
# k = 8 gibbsLocScale(k = k, mu0 = 5, sigma0 = 3, a0 = 270, b0= 300)
data = galaxies / 1000
par(mfrow=c(2,3))
kVec = c(3,4,5,6,7,8)
for (k in kVec){
modelk3 = gibbsLocScale(k = k, mu0 = 2*k, sigma0 = 0.75*k, a0 = 470, b0= 300) # 270
model3kCred = generateCredInt(modelk3)
muTrace = modelk3$mu
piTrace = modelk3$pi
sigmaTrace = modelk3$sigma
hist(data, freq = FALSE, nclass = 20, ylim = c(0, 0.3), main = paste("K = ", k))
lines(modelk3$x, modelk3$model, col = "blue")
lines(modelk3$x, model3kCred$low, col = "red")
lines(modelk3$x, model3kCred$high, col = "red")
}
knitr::opts_chunk$set(echo = TRUE)
library(invgamma)
sam = arima.sim(model = list(ar = 0.75), n = 500)
k0 = 2
v0 = 2
s0 = 2
n = length(sam)
kn = k0
for (i in 2:n){
kn = kn + sam[i - 1]^2
}
pn = 0
for (i in 2:n){
pn = pn + (1/kn)*(sam[i] * sam[i - 1])
}
sn = 0.5*(v0*s0) - 0.5*(kn*pn^2)
for (i in 2:n){
sn = sn + 0.5*sam[i]^2
}
vn = v0 + n + 1
p = 0.5
s = 5
pVec = c()
sVec = c()
for (i in 1:2000){
pNew = rnorm(1, pn, (s / kn)^0.5)
a = vn / 2
b = 0.5*((2*sn) + (kn*(pNew - pn)^2))
sNew = rinvgamma(1, a, b)
pVec = append(pVec, pNew)
sVec = append(sVec, sNew)
p = pNew
s = sNew
}
par(mfrow=c(1,2))
hist(pVec, col = "blue", nclass = 50, freq = FALSE,
xlab = "corr", main = "corr posterior")
hist(sVec, col = "red", nclas = 50, freq = FALSE,
xlab = "variance", main = "var posterior")
getCredIn <- function(vec, alpha){
pVecDens = density(vec)
area = 0
i = 1
while (area <= alpha/2){
dx = pVecDens$x[i + 1] - pVecDens$x[i]
area = area + (dx*(pVecDens$y[i + 1] + pVecDens$y[i])/2)
i = i + 1
}
xLow = pVecDens$x[i]
area = 0
i = 1
while (area <= 1 - (alpha/2)){
dx = pVecDens$x[i + 1] - pVecDens$x[i]
area = area + (dx*(pVecDens$y[i + 1] + pVecDens$y[i])/2)
i = i + 1
}
xHigh = pVecDens$x[i]
result = list("low" = xLow, "high" = xHigh)
return(result)
}
pVecCred = getCredIn(pVec, 0.1)
sVecCred = getCredIn(sVec, 0.1)
par(mfrow=c(1,2))
hist(pVec, col = "blue", nclass = 50, freq = FALSE,
xlab = "corr", main = "corr posterior 90% cred int")
abline(v = pVecCred$low, lw = 1)
abline(v = pVecCred$high, lw = 1)
hist(sVec, col = "red", nclas = 50, freq = FALSE,
xlab = "variance", main = "var posterior 90% cred int")
abline(v = sVecCred$low, lw = 1)
abline(v = sVecCred$high, lw = 1)
paste("90% cred int for corr is between ", pVecCred$low, "pVecCred$low", pVecCred$high)
paste("90% cred int for var is between ", sVecCred$low, "pVecCred$low", sVecCred$high)
getCredIn <- function(vec, alpha){
pVecDens = density(vec)
area = 0
i = 1
while (area <= alpha/2){
dx = pVecDens$x[i + 1] - pVecDens$x[i]
area = area + (dx*(pVecDens$y[i + 1] + pVecDens$y[i])/2)
i = i + 1
}
xLow = pVecDens$x[i]
area = 0
i = 1
while (area <= 1 - (alpha/2)){
dx = pVecDens$x[i + 1] - pVecDens$x[i]
area = area + (dx*(pVecDens$y[i + 1] + pVecDens$y[i])/2)
i = i + 1
}
xHigh = pVecDens$x[i]
result = list("low" = xLow, "high" = xHigh)
return(result)
}
pVecCred = getCredIn(pVec, 0.1)
sVecCred = getCredIn(sVec, 0.1)
par(mfrow=c(1,2))
hist(pVec, col = "blue", nclass = 50, freq = FALSE,
xlab = "corr", main = "corr posterior 90% cred int")
abline(v = pVecCred$low, lw = 1)
abline(v = pVecCred$high, lw = 1)
hist(sVec, col = "red", nclas = 50, freq = FALSE,
xlab = "variance", main = "var posterior 90% cred int")
abline(v = sVecCred$low, lw = 1)
abline(v = sVecCred$high, lw = 1)
paste("90% cred int for corr is between ", pVecCred$low, "and", pVecCred$high)
paste("90% cred int for var is between ", sVecCred$low, "and", sVecCred$high)
